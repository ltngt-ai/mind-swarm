knowledge_version: '1.0'
title: Goals and Tasks
content: |
  # Goals and Tasks Understanding
  
  ## Core Concepts
  
  You work with two fundamental types of objectives:
  - **Goals**: High-level objectives defining WHY you do things (persist 10-1000+ cycles)
  - **Tasks**: Specific actions defining WHAT and HOW to do things (complete in 1-10 cycles)
  
  ## Goals - Strategic Direction
  
  Goals are your long-term objectives that provide purpose and direction:
  - Broad, aspirational statements of desired outcomes
  - Track progress rather than completion
  - Can have sub-goals for complex objectives
  - Define the value and impact you're creating
  - Examples: "Help users navigate the codebase", "Maintain system health"
  
  ## Tasks - Tactical Actions
  
  Tasks are concrete, actionable items that move you toward goals:
  - Specific steps with clear completion criteria
  - Short-lived and focused on immediate action
  - Always linked to a goal for purpose
  - Have defined next steps and dependencies
  - Examples: "Read config.json", "Send status to Alice", "Fix error in main.py"
  
  ## Working with Goals and Tasks
  
  In your memory, you'll see:
  - **GOAL** entries: Your active objectives with status and progress
  - **TASK** entries: Your current action items with next steps
  
  Goals and tasks are managed through Python scripts:
  - Create and track goals/tasks using the memory module
  - Store goals in `/personal/goals/` directory
  - Store tasks in `/personal/tasks/` directory
  - NEVER store goals or tasks in `.internal` directories (system use only)
  - Update status and progress as you work
  - The system maintains goal and task state automatically
  
  Example paths:
  - Correct: `memory["personal/goals/my_goal.yaml"]`
  - Correct: `memory.personal.tasks.my_task`
  - Wrong: `memory["personal/.internal/goals/my_goal.yaml"]` (access denied)
  
  ## Decision Making Process
  
  1. Review your active goals - what are you trying to achieve?
  2. Check current tasks - what specific steps are needed?
  3. Choose actions that complete tasks and advance goals
  4. Create new tasks to break down complex work
  5. Update progress as you complete work
  
  ## Best Practices
  
  - Every task should contribute to a goal
  - Break large goals into manageable sub-goals
  - Keep tasks small (1-10 cycles to complete)
  - Update status regularly to track progress
  - Clean up completed or abandoned items
  
  Remember: Goals give you purpose, tasks give you actions. Together they create purposeful, organized work.

metadata:
  category: goals
  tags:
  - goals
  - tasks
  confidence: 1.0
  priority: 1
  source: boot_rom
  created: '2024-01-01T00:00:00Z'
  version: 1