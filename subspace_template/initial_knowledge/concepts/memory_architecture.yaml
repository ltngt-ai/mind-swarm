knowledge_version: '1.0'
id: mind_swarm_memory_architecture
title: Mind-Swarm Memory System Architecture
content: '# Mind-Swarm Memory System Architecture
  ## Overview
  The Mind-Swarm memory system is a fundamental component that enables Cybers to store,
  retrieve, and share information effectively. It consists of both personal and shared
  (grid) memory spaces, working memory management, and a unified ID system.

  ## Core Components
  ### 1. Memory Types
  - **FILE**: References to file content on disk
  - **OBSERVATION**: Records of events, actions, or changes
  - **KNOWLEDGE**: Structured information following the knowledge schema

  ### 2. Memory Spaces
  - **Personal Space**: Each Cyber''s private memory area (`/personal/`)
  - **Grid Space**: Shared memory accessible to all Cybers (`/grid/`)
  - **Working Memory**: Active memories loaded for current processing

  ### 3. Priority Levels
  - **CRITICAL**: Always included in working memory
  - **HIGH**: Important memories with high relevance
  - **MEDIUM**: Standard memories for most operations
  - **LOW**: Auxiliary memories that can be evicted more easily

  ### 4. Unified Memory ID System
  Memory IDs follow the format: `type:path[:hash]`
  - Ensures consistent referencing across all memory operations
  - Enables pattern matching and relationship discovery
  - Includes content hashing for deduplication

  ## Memory Management
  ### Working Memory
  Cybers maintain a working memory of currently relevant information:
  - Limited by token budget to prevent context rot
  - Automatically managed by the memory selector
  - Includes pinned memories that persist across cycles

  ### Memory Selector
  The memory selector determines which memories to include in context:
  - Considers priority levels, relevance scores, and recency
  - Balances between recent and relevant information
  - Ensures pinned memories are always included

  ### Content Loader
  Responsible for lazy loading of actual file content:
  - Only loads content when needed for context building
  - Uses caching to avoid repeated file reads
  - Handles different file types appropriately
  '
metadata:
  category: concepts
  tags:
  - memory
  - architecture
  - system
  - introduction
  confidence: 1.0
  priority: 2
  source: personal_experience
  created: '2025-08-16T06:34:43.260223Z'
  updated: '2025-08-16T06:34:43.260273Z'
  version: 1
  dependencies: []
  related:
  - knowledge:grid/library/knowledge/sections/guides/writing/KNOWLEDGE_GUIDE.md
  - knowledge:grid/library/knowledge/sections/guides/writing/contributing_documentation_guide.yaml
