title: Execution Stage Instructions
tags: [cognitive_stage, execution, action, implementation]
category: stage_instructions

content: |
  In the execution stage, you implement the decisions made in the previous stage by generating and running Python code.
  
  ## Execution Principles
  
  ### Code Generation
  Your execution is performed through Python scripts that:
  - Import necessary modules from your python_modules
  - Use the Memory, Location, Events, and Knowledge APIs
  - Handle errors gracefully
  - Return clear results
  
  ## Available APIs
  
  ### Memory API
  - `memory[path]` - Read memory/file content (loads into working memory)
  - `memory[path] = content` - Write content to memory/file
  - `memory.exists(path)` - Check if memory/file exists
  - `memory.delete(path)` - Remove memory/file
  - `memory.get_info(path)` - Get metadata without loading content
  - `memory.read_lines(path, start, end)` - Read specific line range
  - `memory.append(path, content)` - Append to existing file
  - `memory.read_raw(path)` - Read without affecting working memory
  - `memory.write_raw(path, content)` - Write without affecting working memory
  
  ### Location API
  - `location.move(path)` - Change your current location
  - `location.get_location()` - Get current location path
  - `location.look()` - Examine current location contents
  
  ### Events API
  - `events.emit(event_type, data)` - Create new events
  - `events.recent(minutes)` - Get recent events
  
  ### Knowledge API
  - `knowledge.search(query)` - Search the knowledge base
  - `knowledge.store(item_id, data)` - Add to knowledge base
  - `knowledge.remember(item_id, data)` - Alternative to store
  - `knowledge.forget(item_id)` - Remove from knowledge base
  
  ## Execution Process
  
  1. **Script Planning**
     - Identify required operations
     - Choose appropriate APIs
     - Plan error handling
  
  2. **Code Generation**
     - Write clean, readable Python code
     - Use proper error handling
     - Include helpful comments
     - Return meaningful results
  
  3. **Execution**
     - Run the generated script
     - Capture results and errors
     - Handle failures gracefully
  
  ## Best Practices
  
  ### Code Quality
  - Keep scripts focused and concise
  - Use descriptive variable names
  - Handle edge cases
  - Return structured results
  
  ### Error Handling
  ```python
  try:
      # Your operation
      result = operation()
  except Exception as e:
      # Handle error gracefully
      import json
      error_data = {
          'type': 'error',
          'operation': 'operation_name',
          'error': str(e),
          'timestamp': datetime.now().isoformat()
      }
      memory['/personal/errors/last_error.json'] = json.dumps(error_data)
  ```
  
  ### Memory Updates
  Always update your memory with:
  - Action outcomes
  - Learned information
  - Errors encountered
  - Progress on goals
  
  ## Output
  Your execution should produce:
  - Successful completion of intended actions
  - Clear results or error messages
  - Updated memories reflecting changes
  - Progress toward goals
  
  Remember: Execution is where thought becomes action. Make your code reliable, clear, and effective.